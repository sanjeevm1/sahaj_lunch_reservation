name: Lunch reserver team6

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  Unit_test:
    name: Run unit Tests
    runs-on: self-hosted
    steps:
      - name: Load directory
        uses: actions/checkout@v4
      - name: Setup java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Run unit tests
        run: ./gradlew test --tests "LoginServiceUnitTest"
  Integration_test:
    name: Run Integration Tests
    runs-on: self-hosted
    needs: Unit_test
  
    steps:
      - name: Load directory
        uses: actions/checkout@v4
        
      - name: Setup java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Integration test
        env:
          POSTGRES_URL: jdbc:postgresql://localhost:5432/test
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: postgres
        run: ./gradlew test --tests "gkl.exercise.LunchReservationServerTestEntityController"
  Store_ECR:
    name: Store artifact on ecr
    runs-on: ubuntu-latest
    needs: Integration_test
    permissions:
      contents: read

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test


    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Gradle Wrapper
        env:
          POSTGRES_URL: jdbc:postgresql://localhost:5432/test
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: postgres
        run: ./gradlew build
      - name: View Directory
        run: ls


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          
          docker build -t ci-gurukul-team6-pair-ms .
          docker tag ci-gurukul-team6-pair-ms:latest 331061725593.dkr.ecr.ap-south-1.amazonaws.com/ci-gurukul-team6-pair-ms:latest
          docker push 331061725593.dkr.ecr.ap-south-1.amazonaws.com/ci-gurukul-team6-pair-ms:latest
